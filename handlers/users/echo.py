import time
import asyncio

from aiogram import types, bot
from aiogram.dispatcher import FSMContext
import csv
import logging

from loader import dispatcher, amplitude, bot
from data import config


logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO)


# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
@dispatcher.message_handler(state="*", content_types=types.ContentTypes.ANY, user_id=config.ADMINS)
async def bot_echo_admins(message: types.Message, state: FSMContext):
    if message.text.startswith("#—Ä–∞—Å—Å—ã–ª–∫–∞") and message.text != "#—Ä–∞—Å—Å—ã–ª–∫–∞":
        await mailing(message)


# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
@dispatcher.message_handler(state="*", content_types=types.ContentTypes.ANY)
async def bot_echo_all(message: types.Message, state: FSMContext):
    data = await state.get_data()
    suggest_state = data.get("suggest_state")

    if suggest_state == 1:
        await state.update_data(suggest_state=2, restaurant_name=message.text)
        await message.answer("–ö–∞–∫–∏–µ –≤–µ–≥–∞–Ω—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏?")
    elif suggest_state == 2:
        await state.update_data(suggest_state=0)
        await message.answer("–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ –Ω–∞—à—É –±–∞–∑—É. –°–ø–∞—Å–∏–±–æ!\n\n–ù–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –º–µ—Å—Ç. –ï—Å–ª–∏, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ Vegan Map, –Ω–∞–ø–∏—à–∏—Ç–µ @oksnavau")

        restaurant_name = data.get("restaurant_name")
        await bot.send_message(config.ADMINS[0], f'#–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ_–∑–∞–≤–µ–¥–µ–Ω–∏–µ\n<b>{data.get("restaurant_name")}</b>\n{message.text}')
        await bot.send_message(config.ADMINS[1], f'#–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ_–∑–∞–≤–µ–¥–µ–Ω–∏–µ\n<b>{data.get("restaurant_name")}</b>\n{message.text}')
    else:
        await message.answer('''
‚ö†Ô∏è –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ (–±—ã–≤–∞–µ—Ç —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞):
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª
3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø Telegram –∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏)

üß≠ –ö–∞–∫ –ø—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É¬ª –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º
2. –¢–∞–ø–Ω–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–∞—Ä—à—Ä—É—Ç—ã¬ª
4. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç

üó∫ –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–º —Ä–∞–π–æ–Ω–µ
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–∫—É –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –º–µ—Å—Ç–µ

üö¶ –°—Ç–∞—Ç—É—Å—ã –∑–∞–≤–µ–¥–µ–Ω–∏–π
‚Ä¢ 100% vegan: –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –≤–µ–≥–∞–Ω—Å–∫–∏–µ
‚Ä¢ –ö—É—Ö–Ω—è ‚Äì 100 vegan, –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º —É—Ç–æ—á–Ω—è–π—Ç–µ: –æ—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –∫–∞—Ñ–µ ¬´–û–≥—É—Ä—Ü—ã¬ª –∏ ¬´VeggieBox¬ª
‚Ä¢ –ë–æ–ª—å—à–µ —Ç—Ä—ë—Ö –≤–µ–≥–∞–Ω—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π: –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ 4 –∏ –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ –≤–µ–≥–∞–Ω—É
‚Ä¢ –ï—Å–ª–∏ –±–ª—é–¥ –º–µ–Ω—å—à–µ —Ç—Ä–µ—Ö, –º—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫

‚ù§Ô∏è –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ ‚Äì /suggest

‚úâÔ∏è –í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚Äì @startsevdev''')
    logging.info("User {} sent other content".format(message.from_user.id))
    amplitude.log(message.from_user.id, "Other")


async def mailing(message):
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª users.csv —Å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º ¬´id¬ª")
    await asyncio.sleep(60)
    text = message.text.split("\n", 1)[1]
    cluster = [[]]
    counter = 0
    await message.answer("–†–∞—Å—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    with open('data/users.csv') as File:
        reader = csv.reader(File)
        header = next(reader)
        for user_id in reader:
            if counter < 30:
                cluster[len(cluster) - 1].append(user_id[0])
                counter += 1
            else:
                counter = 1
                cluster.append([])
                cluster[len(cluster) - 1].append(user_id[0])
    for c in cluster:
        for user_id in c:
            try:
                await bot.send_message(user_id, text)
                logging.info("Sent to " + user_id)
            except BaseException:
                logging.info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + user_id)
        await asyncio.sleep(0.1)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    logging.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
